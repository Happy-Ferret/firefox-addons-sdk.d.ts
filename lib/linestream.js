// Generated by CoffeeScript 1.6.3
/**
File: linestream.coffee
@author Vitaly Tomilin
*/


(function() {
  var LineStream, stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  stream = require('stream');

  /**
  @class
  LineStream implements Writable stream such that it recognizes lines of text in
  the input and emits 'line' event for each line.
  */


  LineStream = (function(_super) {
    __extends(LineStream, _super);

    /**
    @constructor
    Initializes an instance of LineStream with options given.
    @param {Object} [options]
    @see stream.Writable([options])
    */


    function LineStream(options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      this.chunkBuffer = new Buffer(LineStream.prototype.CHUNKBUF_LEN);
      this.lastLine = '';
      this.on('finish', function() {
        if (_this.lastLine) {
          return _this.emit('lines', [_this.lastLine]);
        }
      });
      options.highWaterMark = LineStream.prototype.CHUNKBUF_LEN;
      LineStream.__super__.constructor.call(this, options);
    }

    /**
    @private
    */


    LineStream.prototype._write = function(chunk, encoding, callback) {
      var lenReqd, lines, _i, _ref;
      lenReqd = chunk.length + this.lastLine.length;
      if (this.chunkBuffer.length < lenReqd) {
        this.chunkBuffer = new Buffer(lenReqd);
      }
      this.chunkBuffer.write(this.lastLine);
      if (Buffer.isBuffer(chunk)) {
        chunk.copy(this.chunkBuffer, this.lastLine.length);
      } else {
        this.chunkBuffer.write(chunk, this.lastLine.length);
      }
      _ref = String.prototype.split.call(this.chunkBuffer.slice(0, lenReqd), "\n"), lines = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), this.lastLine = _ref[_i++];
      this.emit('lines', lines);
      return callback(null);
    };

    return LineStream;

  })(stream.Writable);

  LineStream.prototype.CHUNKBUF_LEN = 4096;

  module.exports = LineStream;

}).call(this);
